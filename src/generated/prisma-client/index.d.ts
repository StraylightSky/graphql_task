// Code generated by Prisma (prisma@1.23.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  car: (where?: CarWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  car: (where: CarWhereUniqueInput) => CarPromise;
  cars: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Car>;
  carsConnection: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCar: (data: CarCreateInput) => CarPromise;
  updateCar: (
    args: { data: CarUpdateInput; where: CarWhereUniqueInput }
  ) => CarPromise;
  updateManyCars: (
    args: { data: CarUpdateManyMutationInput; where?: CarWhereInput }
  ) => BatchPayloadPromise;
  upsertCar: (
    args: {
      where: CarWhereUniqueInput;
      create: CarCreateInput;
      update: CarUpdateInput;
    }
  ) => CarPromise;
  deleteCar: (where: CarWhereUniqueInput) => CarPromise;
  deleteManyCars: (where?: CarWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  car: (
    where?: CarSubscriptionWhereInput
  ) => CarSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "vin_ASC"
  | "vin_DESC"
  | "make_ASC"
  | "make_DESC"
  | "model_ASC"
  | "model_DESC"
  | "year_ASC"
  | "year_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CarCreateInput {
  title: String;
  vin?: String;
  make?: String;
  model?: String;
  year?: Int;
}

export interface CarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  vin?: String;
  vin_not?: String;
  vin_in?: String[] | String;
  vin_not_in?: String[] | String;
  vin_lt?: String;
  vin_lte?: String;
  vin_gt?: String;
  vin_gte?: String;
  vin_contains?: String;
  vin_not_contains?: String;
  vin_starts_with?: String;
  vin_not_starts_with?: String;
  vin_ends_with?: String;
  vin_not_ends_with?: String;
  make?: String;
  make_not?: String;
  make_in?: String[] | String;
  make_not_in?: String[] | String;
  make_lt?: String;
  make_lte?: String;
  make_gt?: String;
  make_gte?: String;
  make_contains?: String;
  make_not_contains?: String;
  make_starts_with?: String;
  make_not_starts_with?: String;
  make_ends_with?: String;
  make_not_ends_with?: String;
  model?: String;
  model_not?: String;
  model_in?: String[] | String;
  model_not_in?: String[] | String;
  model_lt?: String;
  model_lte?: String;
  model_gt?: String;
  model_gte?: String;
  model_contains?: String;
  model_not_contains?: String;
  model_starts_with?: String;
  model_not_starts_with?: String;
  model_ends_with?: String;
  model_not_ends_with?: String;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: CarWhereInput[] | CarWhereInput;
  OR?: CarWhereInput[] | CarWhereInput;
  NOT?: CarWhereInput[] | CarWhereInput;
}

export interface CarUpdateInput {
  title?: String;
  vin?: String;
  make?: String;
  model?: String;
  year?: Int;
}

export interface CarUpdateManyMutationInput {
  title?: String;
  vin?: String;
  make?: String;
  model?: String;
  year?: Int;
}

export interface CarSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarWhereInput;
  AND?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  OR?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  NOT?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
}

export type CarWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface CarEdge {
  node: Car;
  cursor: String;
}

export interface CarEdgePromise extends Promise<CarEdge>, Fragmentable {
  node: <T = CarPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarEdgeSubscription
  extends Promise<AsyncIterator<CarEdge>>,
    Fragmentable {
  node: <T = CarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Car {
  id: ID_Output;
  title: String;
  vin?: String;
  make?: String;
  model?: String;
  year?: Int;
  createdAt: DateTimeOutput;
}

export interface CarPromise extends Promise<Car>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  vin: () => Promise<String>;
  make: () => Promise<String>;
  model: () => Promise<String>;
  year: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CarSubscription
  extends Promise<AsyncIterator<Car>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  vin: () => Promise<AsyncIterator<String>>;
  make: () => Promise<AsyncIterator<String>>;
  model: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CarSubscriptionPayload {
  mutation: MutationType;
  node: Car;
  updatedFields: String[];
  previousValues: CarPreviousValues;
}

export interface CarSubscriptionPayloadPromise
  extends Promise<CarSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarPreviousValuesPromise>() => T;
}

export interface CarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarPreviousValuesSubscription>() => T;
}

export interface CarConnection {
  pageInfo: PageInfo;
  edges: CarEdge[];
}

export interface CarConnectionPromise
  extends Promise<CarConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarEdge>>() => T;
  aggregate: <T = AggregateCarPromise>() => T;
}

export interface CarConnectionSubscription
  extends Promise<AsyncIterator<CarConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCar {
  count: Int;
}

export interface AggregateCarPromise
  extends Promise<AggregateCar>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarSubscription
  extends Promise<AsyncIterator<AggregateCar>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarPreviousValues {
  id: ID_Output;
  title: String;
  vin?: String;
  make?: String;
  model?: String;
  year?: Int;
  createdAt: DateTimeOutput;
}

export interface CarPreviousValuesPromise
  extends Promise<CarPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  vin: () => Promise<String>;
  make: () => Promise<String>;
  model: () => Promise<String>;
  year: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CarPreviousValuesSubscription
  extends Promise<AsyncIterator<CarPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  vin: () => Promise<AsyncIterator<String>>;
  make: () => Promise<AsyncIterator<String>>;
  model: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Car",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
